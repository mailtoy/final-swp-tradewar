{"map":"{\"version\":3,\"sources\":[\"/Users/mailtoy/Documents/prefinal/frontend/src/App.js\",\"/Users/mailtoy/Documents/prefinal/frontend/src/serviceWorker.js\",\"/Users/mailtoy/Documents/prefinal/frontend/src/index.js\"],\"names\":[\"App\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"componentDidMount\",\"_this$state\",\"state\",\"endpoint\",\"temp\",\"message\",\"socketIOClient\",\"on\",\"messageNew\",\"push\",\"setState\",\"data\",\"forEach\",\"m\",\"toLowerCase\",\"includes\",\"hashtags\",\"split\",\"name\",\"findData\",\"find\",\"d\",\"count\",\"react_default\",\"a\",\"createElement\",\"es6\",\"width\",\"height\",\"strokeDasharray\",\"dataKey\",\"fill\",\"style\",\"overflow\",\"map\",\"i\",\"key\",\"marginTop\",\"paddingLeft\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"sSAkFeA,cAnEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,kBAAoB,WAAM,IAAAC,EACMR,EAAKS,MAA3BC,EADgBF,EAChBE,SACFC,EAFkBH,EACNI,QAEHC,GAAAA,CAAeH,GACvBI,GAAG,cAAe,SAACC,GACxBJ,EAAKK,KAAKD,GACVf,EAAKiB,SAAS,CAAEL,QAASD,OAZ3BX,EAAKS,MAAQ,CACXG,QAAS,GACTF,SAAU,eAJAV,wEAkBL,IACCY,EAAYT,KAAKM,MAAjBG,QACFM,EAAO,GAkBb,OAjBAN,EAAQO,QAAQ,SAAAC,GACd,GAAIA,GAAKA,EAAEC,cAAcC,SAAS,KAAM,CACtC,IAAMC,EAAWH,EAAEI,MAAM,KACzB,IAAKD,EAAS,GAAGD,SAAS,SACxB,OACF,IAAMG,EAAOF,EAAS,GAAGC,MAAM,SAAS,GACxC,IAAKC,EACH,OACF,IAAMC,EAAWR,EAAKS,KAAK,SAAAC,GAAC,OAAIA,EAAEH,OAASA,IACvCC,EACFA,EAASG,QAETX,EAAKF,KAAK,CAAES,KAAAA,EAAMI,MAAO,OAM7BC,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,MAAO,IAAKC,OAAQ,IAAKjB,KAAMA,GACvCY,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeG,gBAAgB,QAC/BN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOI,QAAQ,SACfP,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKI,QAAQ,QAAQC,KAAK,cAM9BR,EAAAC,EAAAC,cAAA,MAAA,CAAKO,MAAO,CAAEJ,OAAQ,QAASK,SAAU,WAErC5B,EAAQ6B,IAAI,SAACvB,EAAMwB,GAAP,OACVZ,EAAAC,EAAAC,cAAA,MAAA,CAAKW,IAAKD,EAAGH,MAAO,CAAEK,UAAW,GAAIC,YAAa,KAC/CH,EAAI,EADP,MACaxB,cA1DT4B,EAAAA,WCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from 'react'\\nimport socketIOClient from 'socket.io-client'\\nimport {\\n  BarChart,\\n  CartesianGrid,\\n  XAxis,\\n  YAxis,\\n  Tooltip,\\n  Legend,\\n  Bar,\\n  // Line,\\n  // LineChart,\\n} from 'recharts'\\n\\nclass App extends Component {\\n  constructor() {\\n    super()\\n    this.state = {\\n      message: [],\\n      endpoint: \\\"34.66.229.5\\\" // เชื่อมต่อไปยัง url ของ realtime server\\n    }\\n  }\\n\\n  componentDidMount = () => {\\n    const { endpoint, message } = this.state\\n    const temp = message\\n    const socket = socketIOClient(endpoint)\\n    socket.on('new-message', (messageNew) => {\\n      temp.push(messageNew)\\n      this.setState({ message: temp })\\n    })\\n  }\\n\\n  render() {\\n    const { message } = this.state\\n    const data = []\\n    message.forEach(m => {\\n      if (m && m.toLowerCase().includes('#')) {\\n        const hashtags = m.split('#')\\n        if (!hashtags[1].includes('BNK48'))\\n          return\\n        const name = hashtags[1].split('BNK48')[0]\\n        if (!name)\\n          return\\n        const findData = data.find(d => d.name === name)\\n        if (findData) {\\n          findData.count++\\n        } else {\\n          data.push({ name, count: 1 })\\n        }\\n      }\\n    })\\n\\n    return (\\n      <div>\\n        <div>\\n          <BarChart width={730} height={250} data={data}>\\n            <CartesianGrid strokeDasharray=\\\"3 3\\\" />\\n            <XAxis dataKey=\\\"name\\\" />\\n            <YAxis />\\n            <Tooltip />\\n            <Legend />\\n            <Bar dataKey=\\\"count\\\" fill=\\\"#8884d8\\\" />\\n          </BarChart>\\n          {/* <LineChart width={400} height={400} data={data}>\\n            <Line type=\\\"monotone\\\" dataKey=\\\"uv\\\" stroke=\\\"#8884d8\\\" />\\n          </LineChart> */}\\n        </div>\\n        <div style={{ height: '500px', overflow: 'scroll' }}>\\n          {\\n            message.map((data, i) =>\\n              <div key={i} style={{ marginTop: 20, paddingLeft: 50 }} >\\n                {i + 1} : {data}\\n              </div>\\n            )\\n          }\\n        </div>\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default App\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{187:function(e,t,n){e.exports=n(394)},192:function(e,t,n){},215:function(e,t){},394:function(e,t,n){\"use strict\";n.r(t);var a=n(1),o=n.n(a),r=n(54),i=n.n(r),c=(n(192),n(148)),l=n(149),s=n(160),u=n(150),m=n(161),d=n(151),f=n.n(d),h=n(17),p=function(e){function t(){var e;return Object(c.a)(this,t),(e=Object(s.a)(this,Object(u.a)(t).call(this))).componentDidMount=function(){var t=e.state,n=t.endpoint,a=t.message;f()(n).on(\"new-message\",function(t){a.push(t),e.setState({message:a})})},e.state={message:[],endpoint:\"34.66.229.5\"},e}return Object(m.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){var e=this.state.message,t=[];return e.forEach(function(e){if(e&&e.toLowerCase().includes(\"#\")){var n=e.split(\"#\");if(!n[1].includes(\"BNK48\"))return;var a=n[1].split(\"BNK48\")[0];if(!a)return;var o=t.find(function(e){return e.name===a});o?o.count++:t.push({name:a,count:1})}}),o.a.createElement(\"div\",null,o.a.createElement(\"div\",null,o.a.createElement(h.b,{width:730,height:250,data:t},o.a.createElement(h.c,{strokeDasharray:\"3 3\"}),o.a.createElement(h.f,{dataKey:\"name\"}),o.a.createElement(h.g,null),o.a.createElement(h.e,null),o.a.createElement(h.d,null),o.a.createElement(h.a,{dataKey:\"count\",fill:\"#8884d8\"}))),o.a.createElement(\"div\",{style:{height:\"500px\",overflow:\"scroll\"}},e.map(function(e,t){return o.a.createElement(\"div\",{key:t,style:{marginTop:20,paddingLeft:50}},t+1,\" : \",e)})))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(o.a.createElement(p,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[187,1,2]]]);","extractedComments":[]}