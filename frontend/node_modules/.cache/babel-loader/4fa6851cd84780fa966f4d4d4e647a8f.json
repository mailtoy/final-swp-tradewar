{"ast":null,"code":"var _jsxFileName = \"/Users/mailtoy/Documents/prefinal/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { CartesianGrid, XAxis, YAxis, Line, LineChart } from 'recharts';\nimport moment from 'moment';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {\n      const _this$state = this.state,\n            endpoint = _this$state.endpoint,\n            message = _this$state.message;\n      const temp = message;\n      const socket = socketIOClient(endpoint);\n      socket.on('new-message', messageNew => {\n        temp.push(messageNew);\n        this.setState({\n          message: temp\n        });\n      });\n    };\n\n    this.state = {\n      message: [],\n      endpoint: \"104.197.98.78\" // เชื่อมต่อไปยัง url ของ realtime server\n\n    };\n  }\n\n  render() {\n    const message = this.state.message;\n    const data = [];\n    message.forEach(m => {\n      // if (m && m.toLowerCase().includes('#')) {\n      //   const hashtags = m.split('#')\n      //   if (!hashtags[1].includes('BNK48'))\n      //     return\n      //   const name = hashtags[1].split('BNK48')[0]\n      //   if (!name)\n      //     return\n      //   const findData = data.find(d => d.name === name)\n      //   if (findData) {\n      //     findData.count++\n      //   } else {\n      //     data.push({ name, count: 1 })\n      //   }\n      // }\n      // data.push({ name: name, count: 1 })\n      // var res = name.substring(0, 4);\n      const name = moment(m.created_at).format('DD-MM-YYYY HH:mm:ss');\n      let found = false;\n\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].name === name) {\n          data[i].count++;\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        data.push({\n          name: name,\n          count: 1\n        });\n      }\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(LineChart, {\n      width: 700,\n      height: 400,\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(XAxis, {\n      dataKey: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(CartesianGrid, {\n      stroke: \"#eee\",\n      strokeDasharray: \"5 5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"count\",\n      stroke: \"#8884d8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      style: {\n        height: '500px',\n        overflow: 'scroll'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, message.map((data, i) => React.createElement(\"div\", {\n      key: i,\n      style: {\n        marginTop: 20,\n        paddingLeft: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, i + 1, \" : \", data.text))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mailtoy/Documents/prefinal/frontend/src/App.js"],"names":["React","Component","socketIOClient","CartesianGrid","XAxis","YAxis","Line","LineChart","moment","App","constructor","componentDidMount","state","endpoint","message","temp","socket","on","messageNew","push","setState","render","data","forEach","m","name","created_at","format","found","i","length","count","top","right","left","bottom","height","overflow","map","marginTop","paddingLeft","text"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\nimport {\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Line,\n  LineChart,\n} from 'recharts'\nimport moment from 'moment'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      message: [],\n      endpoint: \"104.197.98.78\" // เชื่อมต่อไปยัง url ของ realtime server\n    }\n  }\n\n  componentDidMount = () => {\n    const { endpoint, message } = this.state\n    const temp = message\n    const socket = socketIOClient(endpoint)\n    socket.on('new-message', (messageNew) => {\n      temp.push(messageNew)\n      this.setState({ message: temp })\n    })\n  }\n\n  render() {\n    const { message } = this.state\n    const data = []\n    message.forEach(m => {\n      // if (m && m.toLowerCase().includes('#')) {\n      //   const hashtags = m.split('#')\n      //   if (!hashtags[1].includes('BNK48'))\n      //     return\n      //   const name = hashtags[1].split('BNK48')[0]\n      //   if (!name)\n      //     return\n      //   const findData = data.find(d => d.name === name)\n      //   if (findData) {\n      //     findData.count++\n      //   } else {\n      //     data.push({ name, count: 1 })\n      //   }\n      // }\n      // data.push({ name: name, count: 1 })\n      // var res = name.substring(0, 4);\n      const name = moment(m.created_at).format('DD-MM-YYYY HH:mm:ss')\n      let found = false\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].name === name) {\n          data[i].count++\n          found = true\n          break\n        }\n      }\n      if (!found) {\n        data.push({ name: name, count: 1 })\n      }\n    })\n\n    return (\n      <div>\n        <div>\n          <LineChart width={700} height={400} data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\n            <Line type=\"monotone\" dataKey=\"count\" stroke=\"#8884d8\" />\n          </LineChart>\n        </div>\n        <div style={{ height: '500px', overflow: 'scroll' }}>\n          {\n            message.map((data, i) =>\n              <div key={i} style={{ marginTop: 20, paddingLeft: 50 }} >\n                {i + 1} : {data.text}\n              </div>\n            )\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}